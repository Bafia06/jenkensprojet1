pipeline {
    agent{
        docker{
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages{
        stage('Checkout'){
            steps{
                sh 'Checkout passed'
            }
            
        }

        stage('Build and test'){
             sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        }

        stage('Sonarqube'){
            environment{
                SONAR_URL = "http://192.168.35.70:9000"
            }
            steps{
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "rachidouqa/jenkinstest:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('', "docker-cred") {
                            dockerImage.push()
                    }
                }
            }
        }

    }

}
